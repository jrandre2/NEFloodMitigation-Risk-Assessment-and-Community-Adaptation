import geopandas as gpd
import pandas as pd
from pyproj import CRS
import logging
import os
from shapely.validation import make_valid

# Set up logging
log_file_path = "/Users/jesseandrews/Library/CloudStorage/OneDrive-UniversityofNebraskaatKearney/GIS Projects/flood_zone_analysis.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename=log_file_path,
    filemode='w'  # 'w' mode overwrites the file each time the script runs
)

# Add a stream handler to also log to console
console = logging.StreamHandler()
console.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
logging.getLogger('').addHandler(console)

logging.info(f"Log file created at: {log_file_path}")

# File paths
census_tracts_path = "/Users/jesseandrews/Library/CloudStorage/OneDrive-UniversityofNebraskaatKearney/GIS Projects/Study_Area_ACS/ACS_Census_Tracts_Updated.shp"
flood_zones_path = "/Users/jesseandrews/Library/CloudStorage/OneDrive-UniversityofNebraskaatKearney/GIS Projects/FEMA NFHL/Study Area/S_FLD_HAZ_AR_merged.shp"

try:
    # Load shapefiles
    logging.info("Loading shapefiles...")
    census_tracts = gpd.read_file(census_tracts_path)
    flood_zones = gpd.read_file(flood_zones_path)

    logging.debug(f"Census tracts shape: {census_tracts.shape}")
    logging.debug(f"Flood zones shape: {flood_zones.shape}")

    # Check for 'FLD_ZONE' column in flood_zones
    if 'FLD_ZONE' not in flood_zones.columns:
        logging.error("'FLD_ZONE' column not found in flood zones shapefile. Available columns: %s", flood_zones.columns.tolist())
        raise ValueError("'FLD_ZONE' column not found in flood zones shapefile")

    # Check and reproject CRS if necessary
    target_crs = CRS.from_epsg(32104)  # NAD83 / Nebraska East (meters)

    if census_tracts.crs != target_crs:
        logging.info(f"Reprojecting census tracts to {target_crs.name}")
        census_tracts = census_tracts.to_crs(target_crs)

    if flood_zones.crs != target_crs:
        logging.info(f"Reprojecting flood zones to {target_crs.name}")
        flood_zones = flood_zones.to_crs(target_crs)

    # Check and fix geometries
    logging.info("Checking and fixing geometries...")
    census_tracts['geometry'] = census_tracts['geometry'].apply(make_valid)
    flood_zones['geometry'] = flood_zones['geometry'].apply(make_valid)

    # Simplify geometries
    logging.info("Simplifying geometries...")
    census_tracts['geometry'] = census_tracts.geometry.simplify(tolerance=1)
    flood_zones['geometry'] = flood_zones.geometry.simplify(tolerance=1)

    # Get unique flood zone types (excluding 'AREA NOT INCLUDED')
    flood_zone_types = flood_zones['FLD_ZONE'].unique()
    flood_zone_types = [fz for fz in flood_zone_types if fz != 'AREA NOT INCLUDED']
    logging.debug(f"Flood zone types: {flood_zone_types}")

    # Intersect census tracts with flood zones
    logging.info("Intersecting census tracts with flood zones...")
    intersection = gpd.overlay(census_tracts, flood_zones[['FLD_ZONE', 'geometry']], how='intersection')

    # Calculate areas
    intersection['intersection_area'] = intersection.geometry.area
    census_tracts['total_area'] = census_tracts.geometry.area

    # Calculate percentages for each flood zone type
    for fz_type in flood_zone_types:
        col_name = f"{fz_type[:8]}_AR"
        fz_areas = intersection[intersection['FLD_ZONE'] == fz_type].groupby('GEOID')['intersection_area'].sum()
        census_tracts[col_name] = census_tracts['GEOID'].map(fz_areas) / census_tracts['total_area'] * 100
        census_tracts[col_name] = census_tracts[col_name].fillna(0).clip(0, 100).round(2)
        
        logging.info(f"{col_name} range: {census_tracts[col_name].min()} to {census_tracts[col_name].max()}")
        
        # Log any census tracts with high percentages
        high_percentage_tracts = census_tracts[census_tracts[col_name] > 90]
        if not high_percentage_tracts.empty:
            logging.warning(f"Census tracts with {col_name} > 90%:")
            for idx, row in high_percentage_tracts.iterrows():
                logging.warning(f"  Tract {row['GEOID']}: {row[col_name]}%")

    # Calculate total flood zone area and percentage
    total_fz_areas = intersection.groupby('GEOID')['intersection_area'].sum()
    census_tracts['TOTAL_FZ_AR'] = census_tracts['GEOID'].map(total_fz_areas) / census_tracts['total_area'] * 100
    census_tracts['TOTAL_FZ_AR'] = census_tracts['TOTAL_FZ_AR'].fillna(0).clip(0, 100).round(2)

    logging.info(f"Total flood zone percentage range: {census_tracts['TOTAL_FZ_AR'].min()} to {census_tracts['TOTAL_FZ_AR'].max()}")

    # Log census tracts with total flood zone percentage > 90%
    high_total_fz_tracts = census_tracts[census_tracts['TOTAL_FZ_AR'] > 90]
    if not high_total_fz_tracts.empty:
        logging.warning("Census tracts with total flood zone percentage > 90%:")
        for idx, row in high_total_fz_tracts.iterrows():
            logging.warning(f"  Tract {row['GEOID']}: {row['TOTAL_FZ_AR']}%")

    # Remove temporary columns
    census_tracts = census_tracts.drop(columns=['total_area'])

    # Save updated census tracts shapefile
    logging.info(f"Saving updated shapefile to {census_tracts_path}")
    census_tracts.to_file(census_tracts_path)

    logging.info("Processing complete!")

except Exception as e:
    logging.exception("An error occurred during processing:")
   "name": "python",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
